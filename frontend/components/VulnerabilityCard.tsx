import { useState } from 'react'

interface VulnerabilityCardProps {
  vulnerability: string
  probability: number
  severity: 'critical' | 'high' | 'medium' | 'low'
  mitigation?: string
}

export default function VulnerabilityCard({ 
  vulnerability, 
  probability, 
  severity, 
  mitigation 
}: VulnerabilityCardProps) {
  const [isExpanded, setIsExpanded] = useState(false)

  const severityConfig = {
    critical: {
      color: 'text-danger-700',
      bg: 'bg-danger-50',
      border: 'border-danger-200',
      icon: 'üö®'
    },
    high: {
      color: 'text-danger-600',
      bg: 'bg-danger-25',
      border: 'border-danger-200',
      icon: '‚ö†Ô∏è'
    },
    medium: {
      color: 'text-warning-700',
      bg: 'bg-warning-50',
      border: 'border-warning-200',
      icon: '‚ö°'
    },
    low: {
      color: 'text-warning-600',
      bg: 'bg-warning-25',
      border: 'border-warning-200',
      icon: '‚ÑπÔ∏è'
    }
  }

  const config = severityConfig[severity]

  return (
    <div className={`${config.bg} ${config.border} border rounded-lg p-4`}>
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <span className="text-lg">{config.icon}</span>
          <div>
            <h4 className={`font-medium ${config.color}`}>
              {vulnerability.replace(/_/g, ' ').toUpperCase()}
            </h4>
            <p className="text-sm text-gray-600">
              Confidence: {(probability * 100).toFixed(1)}%
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-1">
            <div className={`w-3 h-3 rounded-full ${
              severity === 'critical' ? 'bg-danger-500' :
              severity === 'high' ? 'bg-danger-400' :
              severity === 'medium' ? 'bg-warning-500' : 'bg-warning-400'
            }`} />
            <span className={`text-sm font-medium ${config.color}`}>
              {severity.toUpperCase()}
            </span>
          </div>
          
          {mitigation && (
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-sm text-primary-600 hover:text-primary-700 font-medium"
            >
              {isExpanded ? 'Hide' : 'Show'} Mitigation
            </button>
          )}
        </div>
      </div>

      {isExpanded && mitigation && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <h5 className="font-medium text-gray-900 mb-2">Recommended Mitigation:</h5>
          <p className="text-sm text-gray-700 bg-white p-3 rounded border">
            {mitigation}
          </p>
        </div>
      )}
    </div>
  )
}
